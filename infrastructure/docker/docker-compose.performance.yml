version: "3.8"

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-1
      - api-2
      - api-3
    networks:
      - kiro-network

  # API Instances (Load Balanced)
  api-1:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=4000
      - INSTANCE_ID=api-1
    env_file:
      - .env.production
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - kiro-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  api-2:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=4000
      - INSTANCE_ID=api-2
    env_file:
      - .env.production
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - kiro-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  api-3:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=4000
      - INSTANCE_ID=api-3
    env_file:
      - .env.production
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - kiro-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  # Database Cluster
  postgres-primary:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: kiro_erp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ../database/postgresql.conf:/etc/postgresql/postgresql.conf
      - ../database/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ../database/init-replication.sql:/docker-entrypoint-initdb.d/init-replication.sql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - kiro-network
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G

  postgres-replica-1:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: postgres
      POSTGRES_PRIMARY_HOST: postgres-primary
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres-replica-1-data:/var/lib/postgresql/data
      - ./postgres/recovery.conf:/etc/postgresql/recovery.conf
    command: |
      bash -c "
        if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
          pg_basebackup -h postgres-primary -D /var/lib/postgresql/data -U replicator -v -P -W
          echo 'standby_mode = on' >> /var/lib/postgresql/data/recovery.conf
          echo 'primary_conninfo = ''host=postgres-primary port=5432 user=replicator''' >> /var/lib/postgresql/data/recovery.conf
        fi
        postgres
      "
    depends_on:
      - postgres-primary
    networks:
      - kiro-network
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 3G
        reservations:
          cpus: "0.75"
          memory: 1.5G

  postgres-replica-2:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: postgres
      POSTGRES_PRIMARY_HOST: postgres-primary
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres-replica-2-data:/var/lib/postgresql/data
      - ./postgres/recovery.conf:/etc/postgresql/recovery.conf
    command: |
      bash -c "
        if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
          pg_basebackup -h postgres-primary -D /var/lib/postgresql/data -U replicator -v -P -W
          echo 'standby_mode = on' >> /var/lib/postgresql/data/recovery.conf
          echo 'primary_conninfo = ''host=postgres-primary port=5432 user=replicator''' >> /var/lib/postgresql/data/recovery.conf
        fi
        postgres
      "
    depends_on:
      - postgres-primary
    networks:
      - kiro-network
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 3G
        reservations:
          cpus: "0.75"
          memory: 1.5G

  # Redis Cluster
  redis-cluster:
    image: redis:7-alpine
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis-cluster-data:/data
    ports:
      - "6379:6379"
    networks:
      - kiro-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G

  # TimescaleDB for IoT and Analytics
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_DB: kiro_timeseries
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
      - ./timescaledb/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - kiro-network
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G

  # Elasticsearch for Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - kiro-network
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - kiro-network

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - kiro-network

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    networks:
      - kiro-network

  # Cadvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - kiro-network

volumes:
  postgres-primary-data:
  postgres-replica-1-data:
  postgres-replica-2-data:
  redis-cluster-data:
  timescaledb-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:

networks:
  kiro-network:
    driver: bridge
